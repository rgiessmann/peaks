# coding: utf-8

# In[1]:
# -------------------------------- #
### set plotting options
get_ipython().magic(u'matplotlib')
# -------------------------------- #


# In[2]:
# -------------------------------- #
## import code for data processing
import peaks.footprint
footprint = peaks.footprint.Footprinter()
# -------------------------------- #


# In[20]:
# -------------------------------- #
### Import data of 'Peak Scanner 2'-Output and input_trace-file
trace_list = footprint.get_data("input_traces.csv")
# -------------------------------- #


# In[21]:
# -------------------------------- #
### Set options
## accepted_offset: peaks are clustered, if their size (=bp) lies within this difference (in bp)
## factor_method: if "num" look for optimal factor (free-floating), if "peak" find a footprinting-insensitive peak
## weight_smaller/weight_bigger: importance of misfit peaks which are smaller / bigger than reference peaks
## relative_mode: if "True" determine the importance of misfit peaks due to their relative size compared to the reference peak, if "False" consider absolute difference (in AU)
## from_bp/ to_bp: peaks in this interval of sizes (=bp) shall be considered for analysis.

_accepted_offset = 0.5
_factor_method   = "num"
_weight_smaller  = .1
_weight_bigger   = .9
_relative_mode   = True
_from_bp         = 35
_to_bp           = 200

### Generate the reference trace
ref = footprint.generate_averaged_negative_control(trace_list,accepted_offset=_accepted_offset,factor_method=_factor_method, weight_smaller=0.5, weight_bigger=0.5, relative_mode=_relative_mode, from_bp=_from_bp, to_bp=_to_bp)
# -------------------------------- #


# In[27]:
# -------------------------------- #
### Cluster the peaks of all traces to internal reference
footprint.cluster_peaks(ref,trace_list,accepted_offset=_accepted_offset)
# -------------------------------- #


# In[30]:
# -------------------------------- #
### Determine factor for height adjustment by finding an optimal invariant peak

#_factor_method   = "peak"
#optimal_factors = footprint.determine_factor_single_peak(ref, trace_list, weight_smaller=_weight_smaller, weight_bigger=_weight_bigger, relative_mode=_relative_mode, from_bp=_from_bp, to_bp=_to_bp)

optimal_factors = footprint.determine_factor_numerically(ref, trace_list, weight_smaller=_weight_smaller, weight_bigger=_weight_bigger, relative_mode=_relative_mode, from_bp=_from_bp, to_bp=_to_bp)

### Correct traces with optimal factors 
for index, null in enumerate(trace_list):
    footprint.correct_peaks_with_factor(trace_list[index],optimal_factors[index])
    print("file: {:30.30} --> factor: {:4.2f}".format(trace_list[index].file_name, optimal_factors[index]))
# -------------------------------- #


# In[15]:
# -------------------------------- #
### Calculate fractional occupancy for all footprinted peaks, set "free" ligand concentration to total ligand concentration
footprint.mark_footprinted_peaks(ref, trace_list, threshold=0.01, mark_all=True) 
footprint.add_fractional_occupancies(ref,trace_list)
for trace in trace_list:
    Lfree = footprint.calculate_free_ligand_concentration(ref,trace,mode="Ltot")
    trace.Lfree = Lfree
    del(Lfree)   
    print("file: {:30.30} : Ltot: {:5.2f} , Lfree_conc: {:5.2f}".format(trace.file_name, trace.Ltot_conc, trace.Lfree))
# -------------------------------- #    


# In[16]:
# -------------------------------- #
### Calculate K_d by fitting  fractional_occupancy = L/(L + K_d) to data		
kd_matrix = footprint.fit_data_determine_kd(ref, trace_list)
# -------------------------------- #


# In[17]:
# -------------------------------- #
### Draw a plot for every cluster
!mkdir figures
for cluster in [ref_peak.cluster for ref_peak in ref.peaks]:
    fig, ax = footprint.plot_data(ref, trace_list, cluster, kd_matrix)
    filename = "figures/plot-cluster{}.png".format(cluster)
    fig.savefig(filename)
    pass
# -------------------------------- #


# -------------------------------- #
### Draw a plot for a specific cluster (REMOVE HASHTAGS TO ACTIVATE)
cluster = 1
footprint.plot_data(ref, trace_list, cluster, kd_matrix)                                                                          
# -------------------------------- #


# In[28]:
# -------------------------------- #
### Save K_d-Matrix to filename
footprint.save_kd(kd_matrix, filename="kd-matrix_MS035_036_Ltot.csv")
# -------------------------------- #

# In[28]:
# -------------------------------- #
### Draw an overview plot for all peaks; limit plot to x or y by setting xlim or ylim
#footprint.plot_peakscan(ref,[ref], xlim=(0,200), ylim=(0,600))
# -------------------------------- #

