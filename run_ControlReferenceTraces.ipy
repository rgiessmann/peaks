# coding: utf-8

# In[1]:
# -------------------------------- #
### set plotting options
get_ipython().magic(u'matplotlib')
# -------------------------------- #



## SELECT YOUR LOGGING LEVEL ##
_logging_level = "DEBUG"
#_logging_level = "INFO"
#_logging_level = "WARNING"


#_logging_level = "CRITICAL"
## ------------------------  ##
import logging
_level = eval("logging."+_logging_level)
logging.basicConfig(level=_level)



# In[2]:
# -------------------------------- #
## import code for data processing
import peaks.footprint
footprint = peaks.footprint.Footprinter() 
# -------------------------------- #


# In[3]:
# -------------------------------- #
### Import metadata for 'Peak Scanner 2' output
trace_list = footprint.get_data("./input_traces.csv")
# -------------------------------- #


# In[21]:
# -------------------------------- #
### Set options
## accepted_offset: peaks are clustered, if their size (=bp) lies within this difference (in bp)
## factor_method: if "num" look for optimal factor (free-floating), if "peak" find a footprinting-insensitive peak
## weight_smaller/weight_bigger: importance of misfit peaks which are smaller / bigger than reference peaks
## relative_mode: if "True" determine the importance of misfit peaks due to their relative size compared to the reference peak, if "False" consider absolute difference (in AU)
## from_bp/ to_bp: peaks in this interval of sizes (=bp) shall be considered for analysis.

_accepted_offset = 0.5
_factor_method   = "num"
_weight_smaller  = .5
_weight_bigger   = .5
_relative_mode   = True
_from_bp         = float("-inf")
_to_bp           = float("+inf")
_how_many_peaks_necessary = 1

### Generate the reference trace
ref = footprint.generate_averaged_negative_control(trace_list,accepted_offset=_accepted_offset,factor_method=_factor_method, weight_smaller=0.5, weight_bigger=0.5, relative_mode=_relative_mode, from_bp=_from_bp, to_bp=_to_bp, how_many_peak_necessary=_how_many_peaks_necessary)
# -------------------------------- #


# In[22]:
# -------------------------------- #
### Print information about the newly created internal reference 
footprint.cluster_peaks(ref,[ref],accepted_offset=_accepted_offset)
print("--- Giving you an overview of the reference trace: ---")
for ref_peak in ref.peaks:
        print("cluster: {:3} ref_peak_size: {:8.2f} bp;   ref_peak_height: {:8.1f} * (1 +- {:4.1f} %) AU;    n/N: [size: {:3.2f}, height: {:3.2f}]".format(ref_peak.cluster, ref_peak.size_bp, ref_peak.peak_height, ref_peak.averaged_peak_height_sd/ref_peak.peak_height*100, ref_peak.averaged_peak_size_bp_nm,ref_peak.averaged_peak_height_nm ))
print("--- DONE ---")
# -------------------------------- #

# In[24]:
# -------------------------------- #
### Draw a control plot regarding the quality of reference traces 
footprint.plot_height_size_clustering_success_averaged_negative_control(ref)
# -------------------------------- #


# In[26]:
# -------------------------------- #
### Draw an overview plot of heights and standard deviations of internal reference peaks
footprint.plot_height_size_overview_averaged_negative_control(ref, ylim=(0,1000))
# -------------------------------- #
